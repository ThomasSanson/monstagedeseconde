version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      - image: circleci/ruby:2.5.1-node-browsers # ...with this image as the primary container; this is where all `steps` will run
        environment: # environment variables for primary container
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: monstage_test
          RAILS_ENV: test
      - image: circleci/postgres:10.6 # database image
        environment: # environment variables for database
          POSTGRES_DB: monstage_test
          POSTGRES_USER: monstage_test
          POSTGRES_PASSWORD: monstage_test
      - image: circleci/python:3.6.4
        environment: # environment variables for database
          PIPENV_VENV_IN_PROJECT: true
      - image: circleci/openjdk:8-jdk-browsers

    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory

      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages

      - run:
        command: |
          sudo pip install pipenv
          pipenv install html5validator


      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v
      # Restore bundle cache
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
            - monstage-bundle-cachebust{{ checksum "Gemfile.lock" }}
            - monstage-bundle-cachebust

      - type: cache-restore
        name: Restore yarn cache
        key: montage-yarn-cachebust{{ checksum "yarn.lock" }}

      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle check || bundle install

      - run:
          name: Yarn Install
          command: yarn install

      # Store bundle cache for Ruby dependencies
      - save_cache:
          key: monstage-bundle-cachebust{{ checksum "Gemfile.lock" }}
          paths:
            - ~/.bundle

      - type: cache-save
        name: Store yarn cache
        key: montage-yarn-cachebust{{ checksum "yarn.lock" }}
        paths:
          - ~/.yarn-cache

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Database setup
          environment:
            DATABASE_URL: "postgres://monstage_test:monstage_test@localhost:5432/monstage_test"
          command: bundle exec bin/rails db:create db:schema:load --trace

      - run:
          name: Run TestUnit
          command: bundle exec rake test --trace

      - run:
          name: w3c validation
          command: pipenv run html5validator --root ~/monstage/tmp/w3c

      # Save test results for timing analysis
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test_results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs

  deploy:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy Master to Heroku
          command: |
            git push -f https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git $CIRCLE_BRANCH:master

workflows:
  version: 2
  build-deploy:
      jobs:
        - build
        - deploy:
            requires:
              - build

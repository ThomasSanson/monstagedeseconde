
- if params[:identity_token]
  = render 'identities/register'
- else
  - errors_any = flash.keys.any? { |key| key == "alert" }
  - as = params[:as]
  - incipit = user_presenter.subscription_incipit(as: as)

  main#content[role="main"
              data-controller="signup"
              data-signup-channel-value="#{@resource_channel}"]


    .fr-container.fr-container--fluid
      .fr-grid-row.fr-grid-row-gutters.fr-grid-row--center
        .fr-col-12.fr-col-md-8.fr-col-lg-6
          .fr-container.fr-px-md-0
            .fr-grid-row.fr-grid-row-gutters.fr-grid-row--left
              = render 'layouts/breadcrumb', links: [ ['', incipit[:title]]]
            - if user_presenter.show_when_subscribe?(as: as, field: :minister_video)
              = render 'pages/home/minister_video'
          .fr-container.fr-background-alt--grey.fr-px-md-0.fr-py-10v.fr-py-md-14v
            .fr-grid-row.fr-grid-row-gutters.fr-grid-row--center
              .fr-text-left.fr-mx-3w
                h1#subcription-title.fr-h4
                  = incipit[:title]
                p = incipit[:subtitle]
                p.fr-my-4w
                  | Sauf mention contraire, tous les champs sont obligatoires.
              - flash.keys.map do |key|
                div class="fr-alert fr-alert--#{key == "notice" ? "success" : "error"} fr-mb-2v"
              = render "layouts/form_errors", resource: resource, resource_name: :user
                  = flash[key]
            fieldset#subscription-form.fr-mx-2w[aria-labelledby="subscription-title"]
              legend
              = form_with(model: resource,
                          scope: resource_name,
                          data: { turbo: false },
                          local: true,
                          url: registration_path(resource_name, as: resource.type.demodulize),
                          id: "new_user") do |f|
                - if user_presenter.show_when_subscribe?(as: as, field: :school)
                  .fr-fieldset__element
                    .fr-input-group.fr-mb-2v
                      = react_component("SearchSchool",
                                        props: { classes: "col-12",
                                                  label: 'Nom (ou ville) de mon établissement REP ou REP+',
                                                  required: true,
                                                  resourceName: :user,
                                                  selectClassRoom: can?(:choose_class_room, resource),
                                                  existingSchool: resource&.school&.as_json,
                                                  existingClassRoom: resource.try(:class_room).try(:as_json),
                                      })
                .fr-fieldset__element
                  .fr-input-group.fr-mb-2v
                    label.fr-label for="user_first_name"
                      |Prénom
                    = f.text_field :first_name,
                          class: "fr-input",
                          autocomplete: "on"
                .fr-fieldset__element
                  .fr-input-group.fr-mb-2v
                    label.fr-label for="user_last_name"
                      |Nom
                    = f.text_field :last_name,
                          class: "fr-input",
                          autocomplete: "on"
                - if user_presenter.show_when_subscribe?(as: as, field: :role)
                  .fr-fieldset__element
                    .fr-input-group.fr-mb-2v
                      label.fr-label for="user_role"
                        |Fonction
                      = f.select :role,
                          options_from_collection_for_select(user_roles_to_select, :value, :text, resource.role),
                          { prompt: "-- Veuillez choisir une fonction --" },
                          { class: "fr-select",
                                    required: true,
                                    data: { action: "change->signup#refreshEmailFieldLabel", :'signup-target' => "roleInput" } }
                - if user_presenter.show_when_subscribe?(as: as, field: :employer_role)
                  .fr-fieldset__element
                    .fr-input-group.fr-mb-2v
                      label.fr-label for="user_employer_role"
                        |Fonction au sein de l'entreprise
                      = f.text_field :employer_role,
                                     class: "fr-input",
                                     maxlength: "150",
                                     required: true

                .fr-fieldset__element
                  .fr-input-group
                    label.fr-label [for="user_email" data-signup-target="emailLabel"]
                      |Adresse électronique
                    p.fr-message[data-signup-target="emailExplanation"]
                      |Format attendu : nom@domaine.fr
                    = f.email_field :email,
                          class: "fr-input",
                          value: resource.email.blank? ? params[:email] : resource.email,
                          placeholder: "ex: nom@exemple.fr",
                          autofocus: params[:email].blank? ,
                          :'aria-describedby' => "user_email",
                          type: "email",
                          autocomplete: "on",
                          data: {action: 'change->signup#onBlurEmailInput', :"signup-target" => 'emailInput'}
                    p.fr-message.fr-message--error.d-none[data-signup-target="emailHint"]
                - # <% following avoids javascript errors
                span[data-signup-target="emailBloc"]
                span[data-signup-target="emailRadioButton"]
                span[data-signup-target="phoneInput"]
                span[data-signup-target="phoneBloc"]

                .fr-fieldset__element
                  #password_group.fr-password.fr-mb-2v[data-signup-target="passwordGroup"]
                    label#password_group_label.fr-label[for="user_password"]
                      |Créer un mot de passe
                    .fr-input-wrap
                      = f.password_field :password,
                                        :'aria-describedby' => "user_password-messages",
                                        autocomplete: "new-password",
                                        class: "fr-password__input fr-input fr-password__input fr-input",
                                        required: true,
                                        data: { action: "change->signup#checkPassword", :"signup-target" => "passwordInput" }
                    #user_password-messages.fr-messages-group[aria-live="assertive"]

                    .fr-password__checkbox.fr-checkbox-group.fr-checkbox-group--sm
                      input[aria-label="Afficher le mot de passe"
                            id="user_password-show"
                            type="checkbox"
                            aria-describedby="user_password-show-messages"]
                      label.fr-password__checkbox.fr-label[for="user_password-show"]
                        |  Afficher
                    #user_password-show-messages.fr-messages-group[aria-live="assertive"]
                        p[data-signup-target="passwordHint"]


                - if can?(:choose_operator, :sign_up)
                  .fr-fieldset__element
                    .fr-input-group.fr-mb-2v
                      label.fr-label for="user_operator"
                        |Opérateur
                      = f.select :operator_id,
                          options_from_collection_for_select(Operator.all, :id, :name, resource.operator),
                          { prompt: operator_options_for_default },
                          class: "fr-select"
                .fr-fieldset__element
                  .fr-checkbox-group.fr-mb-2v
                    = f.check_box :accept_terms
                    label.fr-label for="user_accept_terms"
                      -link = link_to "conditions d'utilisation",
                                      conditions_d_utilisation_path,
                                      target: "_blank",
                                      title: "conditions d'utilisation (nouvelle fenêtre)",
                                      rel: "external noopener noreferrer",
                                      class: "font-weight-normal"
                      = "J'accepte les&nbsp;#{link} .".html_safe
                      p
                        = link_to "Lire la Politique de confidentialité",
                                  politique_de_confidentialite_path,
                                  title: "Lire la Politique de confidentialité (nouvelle fenètre)",
                                  target: "_blank",
                                  rel: "external noopener noreferrer",
                                  class: "font-weight-normal"
                        span.font-weight-normal
                          = " pour connaître les modalités d'utilisations de mes informations récoltées."
                .fr-col-12
                  .actions.text-right
                    = f.submit "Valider", class: "fr-btn fr-mx-2w", id: "test-create-user"



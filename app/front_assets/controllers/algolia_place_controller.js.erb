import { Controller } from 'stimulus';
import places from 'places.js';
import { showElement } from '../utils/dom';

export default class extends Controller {
  static targets = [
    'autocompleteFormGroup',
    'autocompleteInput',
    'longitudeInput',
    'latitudeInput',
    'streetInput',
    'cityInput',
    'zipcodeInput',
    'departmentInput',
  ];

  onAlgoliaSearchResultSelected = selection => {
    const { suggestion } = selection;

    $(this.streetInputTarget).val(suggestion.name);
    $(this.cityInputTarget).val(suggestion.city);
    $(this.zipcodeInputTarget).val(suggestion.postcode);
    $(this.departmentInputTarget).val(suggestion.county);
    $(this.longitudeInputTarget).val(suggestion.latlng.lng);
    $(this.latitudeInputTarget).val(suggestion.latlng.lat);
  };

  connect() {
    // initialize algolia api
    this.placesAutocomplete = places({
      container: this.autocompleteInputTarget,
      appId: '<%= Credentials.enc(:algolia, :app_id, prefix_env: false) %>',
      apiKey: '<%= Credentials.enc(:algolia, :api_key, prefix_env: false) %>',
    });

    // configure algolia api
    this.placesAutocomplete.configure({
      language: 'fr',
      countries: ['fr'],
      type: 'address',
    });

    // listen on algolia search result selection
    this.placesAutocomplete.on('change', this.onAlgoliaSearchResultSelected);

    // when everything is ok ; show autocompleteTarget and makes default input readonly
    showElement($(this.autocompleteFormGroupTarget));

    // unfortunately can't use class function on clear callback
    // have to use closured consts
    const $streetInput = $(this.streetInputTarget)
    const $cityInput = $(this.cityInputTarget)
    const $zipcodeInput = $(this.zipcodeInputTarget)
    const $departmentInput = $(this.departmentInputTarget)
    const $latitudeInput = $(this.latitudeInputTarget);
    const $longitudeInput = $(this.longitudeInputTarget);

    $streetInput.prop('readonly', true);
    $cityInput.prop('readonly', true);
    $zipcodeInput.prop('readonly', true);
    $departmentInput.prop('readonly', true);

    const resetInputs = () => {
      $streetInput.val(null);
      $cityInput.val(null);
      $zipcodeInput.val(null);
      $departmentInput.val(null);
      $latitudeInput.val(null);
      $longitudeInput.val(null);
    };

    // listen on clear address
    this.placesAutocomplete.on('clear', resetInputs);
  }

  disconnect() {
    this.placesAutocomplete.destroy();
  }
}
